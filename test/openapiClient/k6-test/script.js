/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 7.3.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "http://192.168.1.106:8080";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/projects", () => {

        // Request No. 1: getProjects
        {
            let url = BASE_URL + `/projects`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createProject
        {
            let url = BASE_URL + `/projects`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "scheduleStartTime": "string", "scheduleEndTime": "string", "color": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "*/*"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/day/{day}/tasks/order", () => {
        let day = 'TODO_EDIT_THE_DAY'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getTasksDayOrder
        {
            let url = BASE_URL + `/day/${day}/tasks/order`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: updateTasksDayOrder
        {
            let url = BASE_URL + `/day/${day}/tasks/order`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "*/*"}};
            let request = http.put(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/projects/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getProject
        {
            let url = BASE_URL + `/projects/${id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: updateProject
        {
            let url = BASE_URL + `/projects/${id}`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "scheduleStartTime": "string", "scheduleEndTime": "string", "color": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "*/*"}};
            let request = http.patch(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/day/{day}/tasks/schedule", () => {
        let day = 'TODO_EDIT_THE_DAY'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getAutoScheduleInfo
        {
            let url = BASE_URL + `/day/${day}/tasks/schedule`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: revokeSchedule
        {
            let url = BASE_URL + `/day/${day}/tasks/schedule`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/user/initialize", () => {

        // Request No. 1: initializeUser
        {
            let url = BASE_URL + `/user/initialize`;
            let request = http.post(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/bannedRanges/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getBannedRange
        {
            let url = BASE_URL + `/bannedRanges/${id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteBannedRange
        {
            let url = BASE_URL + `/bannedRanges/${id}`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/bannedRanges", () => {

        // Request No. 1: getBannedRanges
        {
            let url = BASE_URL + `/bannedRanges`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createBannedRange
        {
            let url = BASE_URL + `/bannedRanges`;
            // TODO: edit the parameters of the request body.
            let body = {"startTime": "string", "endTime": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "*/*"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/actuator/health/**", () => {

        // Request No. 1: health-path
        {
            let url = BASE_URL + `/actuator/health/**`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/projects/{id}/tasks", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getProjectTasks
        {
            let url = BASE_URL + `/projects/${id}/tasks`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/actuator", () => {

        // Request No. 1: links
        {
            let url = BASE_URL + `/actuator`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/validateAuth", () => {

        // Request No. 1: validate
        {
            let url = BASE_URL + `/validateAuth`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/tasks/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getTask
        {
            let url = BASE_URL + `/tasks/${id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: updateTask
        {
            let url = BASE_URL + `/tasks/${id}`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "startDay": "string", "startTime": "string", "durationMin": "integer", "isImportant": "boolean", "isUrgent": "boolean", "projectId": "uuid"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "*/*"}};
            let request = http.patch(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/day/{day}/tasks", () => {
        let day = 'TODO_EDIT_THE_DAY'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getDayTasks
        {
            let url = BASE_URL + `/day/${day}/tasks`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/user", () => {

        // Request No. 1: getUserInfo
        {
            let url = BASE_URL + `/user`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/actuator/health", () => {

        // Request No. 1: health
        {
            let url = BASE_URL + `/actuator/health`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/tasks", () => {
        let day = 'TODO_EDIT_THE_DAY'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getTasks
        {
            let url = BASE_URL + `/tasks?day=${day}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createTask
        {
            let url = BASE_URL + `/tasks`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "startDay": "date", "startTime": "string", "durationMin": "integer", "isImportant": "boolean", "isUrgent": "boolean", "projectId": "uuid"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "*/*"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

}
