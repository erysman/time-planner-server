plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.springdoc.openapi-gradle-plugin" version '1.7.0'
	id 'com.google.cloud.tools.jib' version '3.4.0'
	id 'groovy'
}

group = 'com.pw'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	compile.exclude module: 'spring-boot-starter-tomcat'
	integrationImplementation.extendsFrom testImplementation
	integrationRuntime.extendsFrom testRuntime
	integrationRuntimeOnly.extendsFrom testRuntimeOnly
}
repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude module: 'spring-boot-starter-tomcat'
	}
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//add ehcache
	implementation 'org.hibernate:hibernate-jcache:6.4.1.Final'
	runtimeOnly 'org.ehcache:ehcache:3.10.8'
//	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-jetty'

	implementation 'org.springframework.security:spring-security-oauth2-jose:6.1.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.liquibase:liquibase-core:4.23.0'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'org.zalando:logbook-spring-boot-starter:3.2.0'
	implementation 'org.zalando:logbook-json:3.2.0'
	implementation 'org.zalando:problem-spring-web-starter:0.29.1'
	implementation 'net.ttddyy:datasource-proxy:1.9'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation platform('org.apache.groovy:groovy-bom:4.0.16')
	implementation 'org.apache.groovy:groovy'
	implementation 'org.apache.commons:commons-lang3:3.14.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:testcontainers:1.18.3'
	testImplementation 'org.testcontainers:mysql:1.18.3'
	testImplementation 'org.testcontainers:junit-jupiter:1.18.3'
	testImplementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
	testImplementation "org.spockframework:spock-core"
	testImplementation "org.spockframework:spock-spring"
	testRuntimeOnly 'net.bytebuddy:byte-buddy:1.14.10'
	testRuntimeOnly "org.objenesis:objenesis:3.3"
	runtimeOnly 'com.mysql:mysql-connector-j'
}

sourceSets {
	integration {
		groovy {
		}
		resources {
		}
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

tasks.register('integrationTest', Test) {
	group = 'verification'
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
	useJUnitPlatform()
}
check.dependsOn(test, integrationTest)


bootRun {
	jvmArgs(['-Xmx2048m', '-XX:TieredStopAtLevel=4'])
}

jib {
	to {
		image = "europe-central2-docker.pkg.dev/time-planner-dc611/time-planner-server/time-planner"
	}
}

openApi {
	apiDocsUrl.set("http://localhost:8080/api-docs")
	outputDir.set(file("$buildDir/openapi"))
	outputFileName.set("time-planner-server-openapi.json")
	waitTimeInSeconds.set(30)
/*
	groupedApiMappings.set(["https://localhost:8080/v3/api-docs/groupA" to "swagger-groupA.json",
							"https://localhost:8080/v3/api-docs/groupB" to "swagger-groupB.json"])
*/
	customBootRun {
		args.set(["--spring.profiles.active=local"])
	}
}
tasks.named('generateOpenApiDocs') {
	dependsOn clean
}

tasks.named('test') {
	useJUnitPlatform()
}
